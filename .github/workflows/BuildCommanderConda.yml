on:
  push:
    branches:
    - '*'
    tags:
    - '*'
  pull_request:
    branches:
    - '*'

jobs:
  build:
    name: build-py${{ matrix.python }}-${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3, 2]
        arch: [x86_64, aarch64, ppc64le]
        exclude:
          - os: macos-latest
            arch: aarch64
          - os: macos-latest
            arch: ppc64le
    env:
      COMMANDERCONDA_NAME: CommanderConda${{ matrix.python }}
      ARCH: ${{ matrix.arch }}
      QEMU_STATIC_VERSION: "v3.1.0-3"
      MINIFORGE_URL: "https://github.com/conda-forge/miniforge/releases/download/4.8.3-1"
      MINIFORGE_FILE: "Miniforge3-4.8.3-1-MacOSX-x86_64.sh"
      MINIFORGE_SHA256: fd5dcee77efe428242c9d4c77bf00167f74aca99cf17df7a509359bb4f515164
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        id: cache-qemu
        if: runner.os == 'Linux'
        with:
          path: build/qemu
          key: qemu-${{ hashFiles('qemu-sums.sha256') }}-${{ hashFiles('.github/workflows/BuildCommanderConda.yml') }}
      - name: get qemu static
        if: steps.cache-qemu.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          mkdir -p build/qemu || true
          cd build/qemu
          echo "============= Download QEMU static binaries ============="
          wget https://github.com/multiarch/qemu-user-static/releases/download/${QEMU_STATIC_VERSION}/qemu-${ARCH}-static
          chmod +x qemu-${ARCH}-static
      - name: verify qemu checksums
        if: runner.os == 'Linux'
        working-directory: build/qemu
        run: grep qemu-${ARCH}-static ../../qemu-sums.sha256 | shasum -c
      - uses: actions/cache@v1
        id: cache-miniforge
        if: runner.os == 'macOS'
        with:
          path: build/miniforge
          key: miniforge-${{ env.MINIFORGE_SHA256 }}-${{ hashFiles('.github/workflows/BuildCommanderConda.yml') }}
      - name: get miniforge
        if: steps.cache-miniforge.outputs.cache-hit != 'true' && runner.os == 'macOS'
        run: |
          mkdir -p ./build/miniforge || true
          cd ./build/miniforge
          curl -L -O "${MINIFORGE_URL}/${MINIFORGE_FILE}"
      - name: verify minforge checksum
        if: runner.os == 'macOS'
        working-directory: build/miniforge
        run: |
          echo "${MINIFORGE_SHA256} *${MINIFORGE_FILE}" | tee ${MINIFORGE_FILE}.sha256
          shasum -c ${MINIFORGE_FILE}.sha256
      - name: Build and test CommanderConda
        run: |
          ./build_CommanderConda_${{ runner.os }}.sh
          cp build/$COMMANDERCONDA_NAME-*-${{ runner.os }}-$ARCH.sh build/$COMMANDERCONDA_NAME-${{ runner.os }}-$ARCH.sh
          cp build/$COMMANDERCONDA_NAME-*-${{ runner.os }}-$ARCH.sh.sha256 build/$COMMANDERCONDA_NAME-${{ runner.os }}-$ARCH.sh.sha256
          ls -alh build
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          path: build/CommanderConda*.sh*
