on:
  push:
    branches:
    - '*'
  pull_request:
    branches:
    - '*'

jobs:
  build:
    name: build (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.7', '2.7']
    outputs:
      checksum1: ${{ steps.bcd.outputs.ubunutu-latest-3 }}
      checksum2: ${{ steps.bcd.outputs.ubunutu-latest-2 }}
      checksum3: ${{ steps.bcd.outputs.macos-latest-3 }}
      checksum4: ${{ steps.bcd.outputs.macos-latest-2 }}
      checksum5: ${{ steps.bcd.outputs.windows-latest-3 }}
      checksum6: ${{ steps.bcd.outputs.windows-latest-2 }}
    steps:
      - uses: actions/checkout@v2
      - uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: constructor-env
          auto-update-conda: true
          condarc-file: etc/condarc.yml
          environment-file: etc/environment.yml
          python-version: ${{ matrix.python-version }}
      - name: Conda info
        run: |
          echo "GITHUB_EVENT_NAME = ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REF = ${GITHUB_REF}"
          pip install git+git://github.com/conda/constructor@5c9539a95ed7eafb#egg=constructor --force --no-deps
          conda info
          conda list
      - name: Set Environment
        id: se
        run: |
          export PYVER=${{ matrix.python-version }}
          export MAJ_PY_VER=${PYVER%%.*}
          echo "::set-env name=COMMANDERCONDA_NAME::CommanderConda${PYVER%%.*}"
          echo "::set-env name=MAJ_PY_VER::${MAJ_PY_VER}"
          echo "::set-output name=maj-py-ver::${MAJ_PY_VER}"
      - name: Build conda distribution
        id: bcd
        run: |
          echo "COMMANDERCONDA_NAME = ${COMMANDERCONDA_NAME}"
          constructor --verbose --test || true
          constructor --verbose --dry-run ./CommanderConda || true
          constructor --verbose ./CommanderConda
          ls -Gla
          export CCFILE="$(echo CommanderConda*-*)"
          du -h "${CCFILE}"
          echo "::set-env name=CCFILE::${CCFILE}"
          echo "::set-output name=ccfile::${CCFILE}"
          openssl dgst -sha256 -r "${CCFILE}" | tee "${CCFILE}.sha256"
          case "${{ matrix.os }}" in
            macos-*|ubuntu-*)
              shasum -c "${CCFILE}.sha256"
              ;;
          esac
          export SHA256="$(cut -f 1 -d ' ' < "${CCFILE}.sha256")"
          echo "::set-env name=SHA256::${SHA256}"
          echo "::set-output name=sha256::${SHA256}"
          export SHA_FILE="$(cat "${CCFILE}.sha256")"
          echo "SHA_FILE=${SHA_FILE}"
          echo "::set-output name=${{ matrix.os }}-${{ steps.se.outputs.maj-py-ver }}::${SHA_FILE}"
          echo "bcd.outputs.${{ matrix.os }}-${{ steps.se.outputs.maj-py-ver }}=${SHA_FILE}"
      - name: Test distribution
        if: contains( matrix.os, 'ubuntu' ) || contains( matrix.os, 'macos' )
        env:
          SHA256: ${{ hashFiles( steps.bcd.outputs.ccfile ) }}
        shell: bash
        run: |
          ./${CCFILE} -h || true
          ./${CCFILE} -b -f
          export ALLOW_FAILURE=false
          if [[ ${{ matrix.os }} =~ macos && ${{ matrix.python-version}} == 2.7 ]]; then export ALLOW_FAILURE=true; fi
          if [[ "${GITHUB_REF## }" =~ "^refs/tags/" ]]; then export ALLOW_FAILURE=true; fi
          ./${CCFILE} -b -f -t || ${ALLOW_FAILURE} || [[ ${{ matrix.os }} =~ ubuntu && ${{ matrix.python-version}} == 3.7 ]]
          ./${CCFILE} -b -u -t || ${ALLOW_FAILURE}

      - name: upload
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: ${{ steps.bcd.outputs.ccfile }}*
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: artifact
    steps:
      - uses: actions/download-artifact@v2
      - name: Show artifacts
        run: ls -RGla
      - name: Verify SHA256 Checksums
        run: |
          for sum in *.sha256; do
            shasum -w -c "${sum}"
          done
      - name: Dump steps context
        env:
          NEEDS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$NEEDS_CONTEXT"
      - name: Dump needs
        env:
          JOB_OUTPUTS: ${{ toJson(needs) }}
        run: echo "${JOB_OUTPUTS}"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Check passed SHA256 checksums
        run: |
          echo "${{ needs.build.ouputs.checksum1 }}" >> sha256-checksums.txt
          echo "${{ needs.build.ouputs.checksum2 }}" >> sha256-checksums.txt
          echo "${{ needs.build.ouputs.checksum3 }}" >> sha256-checksums.txt
          echo "${{ needs.build.ouputs.checksum4 }}" >> sha256-checksums.txt
          echo "${{ needs.build.ouputs.checksum5 }}" >> sha256-checksums.txt
          echo "${{ needs.build.ouputs.checksum6 }}" >> sha256-checksums.txt
          cat sha256-checksums.txt
          shasum -c sha256-checksums.txt
